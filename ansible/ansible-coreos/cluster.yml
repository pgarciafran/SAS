# Bootstrap Ansible for CoreOS:
#   - Create /opt/apptv directory
#   - Install PyPy (portable Python implementation), pip and dependencies
- name: Ansible bootstraping in CoreOS servers
  hosts: coreos
  gather_facts: False
  roles:
    - coreos_prebootstrap
    - ansible-coreos-bootstrap

# CoreOS configuration:
#   - Add /opt/apptv/bin to PATH environment variable
#   - Generate cloud-config
- name: CoreOS configuration
  hosts: coreos
  roles:
    - coreos

# Docker Compose Setup
# Swarm managers:
#   - Install Docker-compose with pip
- name: docker-compose setup
  hosts: swarm-managers
  serial: 1
  roles:
    - install_docker_compose

# Docker Swarm bootstrap (1.12)
- name: Swarm cluster initialization (at first manager node)
  hosts: swarm-managers[0]
  roles:
    - { role: swarm_node, purpose: init }

- name: Add the rest of manager nodes to Swarm cluster
  hosts: swarm-managers[1:]
  become: yes
  become_user: root
  serial: 1
  roles:
    - { role: swarm_node, purpose: add_managers, manager_token: "{{ hostvars[groups['coreos-cluster-managers'][0]]['manager_token'] }}", swarm_bind_addr: "{{ hostvars[groups['coreos-cluster-managers'][0]]['host_addr'] }}" }

#- name: Add worker nodes (only workers, not managers) to Swarm cluster
  hosts: swarm-workers
  become: yes
  become_user: root
  serial: 1
  roles:
    - { role: swarm_node, purpose: add_workers, worker_token: "{{ hostvars[groups['coreos-cluster-managers'][0]]['worker_token'] }}", swarm_bind_addr: "{{ hostvars[groups['coreos-cluster-managers'][0]]['host_addr'] }}" }

# Middleware or internal nodes:
#   - Create directories for Docker containers persistence (under /data)
- name: Middleware or internal nodes (subgroup of CoreOS servers, inside Docker Swarm cluster)
  hosts: coreos-middlewares
  become: yes
  become_user: root
  roles:
    - middleware_internal

